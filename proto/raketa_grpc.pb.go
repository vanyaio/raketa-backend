// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: raketa.proto

package raketapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RaketaService_SignUp_FullMethodName           = "/raketa.RaketaService/SignUp"
	RaketaService_GetUserRole_FullMethodName      = "/raketa.RaketaService/GetUserRole"
	RaketaService_GetUserStats_FullMethodName     = "/raketa.RaketaService/GetUserStats"
	RaketaService_CreateTask_FullMethodName       = "/raketa.RaketaService/CreateTask"
	RaketaService_DeleteTask_FullMethodName       = "/raketa.RaketaService/DeleteTask"
	RaketaService_AssignUser_FullMethodName       = "/raketa.RaketaService/AssignUser"
	RaketaService_CloseTask_FullMethodName        = "/raketa.RaketaService/CloseTask"
	RaketaService_GetUnassignTasks_FullMethodName = "/raketa.RaketaService/GetUnassignTasks"
	RaketaService_SetTaskPrice_FullMethodName     = "/raketa.RaketaService/SetTaskPrice"
)

// RaketaServiceClient is the client API for RaketaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaketaServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error)
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	AssignUser(ctx context.Context, in *AssignUserRequest, opts ...grpc.CallOption) (*AssignUserResponse, error)
	CloseTask(ctx context.Context, in *CloseTaskRequest, opts ...grpc.CallOption) (*CloseTaskResponse, error)
	GetUnassignTasks(ctx context.Context, in *GetUnassignTasksRequest, opts ...grpc.CallOption) (*GetUnassignTasksResponse, error)
	SetTaskPrice(ctx context.Context, in *SetTaskPriceRequest, opts ...grpc.CallOption) (*SetTaskPriceResponse, error)
}

type raketaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaketaServiceClient(cc grpc.ClientConnInterface) RaketaServiceClient {
	return &raketaServiceClient{cc}
}

func (c *raketaServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, RaketaService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error) {
	out := new(GetUserRoleResponse)
	err := c.cc.Invoke(ctx, RaketaService_GetUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, RaketaService_GetUserStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, RaketaService_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, RaketaService_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) AssignUser(ctx context.Context, in *AssignUserRequest, opts ...grpc.CallOption) (*AssignUserResponse, error) {
	out := new(AssignUserResponse)
	err := c.cc.Invoke(ctx, RaketaService_AssignUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) CloseTask(ctx context.Context, in *CloseTaskRequest, opts ...grpc.CallOption) (*CloseTaskResponse, error) {
	out := new(CloseTaskResponse)
	err := c.cc.Invoke(ctx, RaketaService_CloseTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) GetUnassignTasks(ctx context.Context, in *GetUnassignTasksRequest, opts ...grpc.CallOption) (*GetUnassignTasksResponse, error) {
	out := new(GetUnassignTasksResponse)
	err := c.cc.Invoke(ctx, RaketaService_GetUnassignTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raketaServiceClient) SetTaskPrice(ctx context.Context, in *SetTaskPriceRequest, opts ...grpc.CallOption) (*SetTaskPriceResponse, error) {
	out := new(SetTaskPriceResponse)
	err := c.cc.Invoke(ctx, RaketaService_SetTaskPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaketaServiceServer is the server API for RaketaService service.
// All implementations must embed UnimplementedRaketaServiceServer
// for forward compatibility
type RaketaServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error)
	GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	AssignUser(context.Context, *AssignUserRequest) (*AssignUserResponse, error)
	CloseTask(context.Context, *CloseTaskRequest) (*CloseTaskResponse, error)
	GetUnassignTasks(context.Context, *GetUnassignTasksRequest) (*GetUnassignTasksResponse, error)
	SetTaskPrice(context.Context, *SetTaskPriceRequest) (*SetTaskPriceResponse, error)
	mustEmbedUnimplementedRaketaServiceServer()
}

// UnimplementedRaketaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRaketaServiceServer struct {
}

func (UnimplementedRaketaServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedRaketaServiceServer) GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRole not implemented")
}
func (UnimplementedRaketaServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedRaketaServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedRaketaServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedRaketaServiceServer) AssignUser(context.Context, *AssignUserRequest) (*AssignUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUser not implemented")
}
func (UnimplementedRaketaServiceServer) CloseTask(context.Context, *CloseTaskRequest) (*CloseTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTask not implemented")
}
func (UnimplementedRaketaServiceServer) GetUnassignTasks(context.Context, *GetUnassignTasksRequest) (*GetUnassignTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnassignTasks not implemented")
}
func (UnimplementedRaketaServiceServer) SetTaskPrice(context.Context, *SetTaskPriceRequest) (*SetTaskPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskPrice not implemented")
}
func (UnimplementedRaketaServiceServer) mustEmbedUnimplementedRaketaServiceServer() {}

// UnsafeRaketaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaketaServiceServer will
// result in compilation errors.
type UnsafeRaketaServiceServer interface {
	mustEmbedUnimplementedRaketaServiceServer()
}

func RegisterRaketaServiceServer(s grpc.ServiceRegistrar, srv RaketaServiceServer) {
	s.RegisterService(&RaketaService_ServiceDesc, srv)
}

func _RaketaService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_GetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).GetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_GetUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).GetUserRole(ctx, req.(*GetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_AssignUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).AssignUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_AssignUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).AssignUser(ctx, req.(*AssignUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_CloseTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).CloseTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_CloseTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).CloseTask(ctx, req.(*CloseTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_GetUnassignTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnassignTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).GetUnassignTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_GetUnassignTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).GetUnassignTasks(ctx, req.(*GetUnassignTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaketaService_SetTaskPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaketaServiceServer).SetTaskPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaketaService_SetTaskPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaketaServiceServer).SetTaskPrice(ctx, req.(*SetTaskPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaketaService_ServiceDesc is the grpc.ServiceDesc for RaketaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaketaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raketa.RaketaService",
	HandlerType: (*RaketaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _RaketaService_SignUp_Handler,
		},
		{
			MethodName: "GetUserRole",
			Handler:    _RaketaService_GetUserRole_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _RaketaService_GetUserStats_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _RaketaService_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _RaketaService_DeleteTask_Handler,
		},
		{
			MethodName: "AssignUser",
			Handler:    _RaketaService_AssignUser_Handler,
		},
		{
			MethodName: "CloseTask",
			Handler:    _RaketaService_CloseTask_Handler,
		},
		{
			MethodName: "GetUnassignTasks",
			Handler:    _RaketaService_GetUnassignTasks_Handler,
		},
		{
			MethodName: "SetTaskPrice",
			Handler:    _RaketaService_SetTaskPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raketa.proto",
}
